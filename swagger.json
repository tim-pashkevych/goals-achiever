{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.0",
    "title": "Task-Pro API docs",
    "description": "API documentation for team project 'Task Pro'. [Backend github repository](https://github.com/tim-pashkevych/goals-achiever)",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/license/MIT"
    }
  },
  "servers": [{ "url": "http://localhost:3000/api/v1" }],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints"
    },
    {
      "name": "Boards",
      "description": "Boards endpoints"
    },
    {
      "name": "Columns",
      "description": "Columns endpoints"
    },
    {
      "name": "Cards",
      "description": "Cards endpoints"
    },
    {
      "name": "Issues",
      "description": "Issues endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "SignUp user",
        "requestBody": {
          "description": "New user credentials object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBadRequestError"
                }
              }
            }
          },
          "409": {
            "description": "Provided email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailDublicateError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "SignIn user",
        "requestBody": {
          "description": "User credentials object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "SignOut user",
        "security": [{ "Token": [] }],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update user's avatar",
        "security": [{ "Token": [] }],
        "requestBody": {
          "description": "User's new avatar file",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbsentAvatarError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },

    "/boards/": {
      "post": {
        "tags": ["Boards"],
        "summary": "Create a new board",
        "security": [{ "Token": [] }],
        "requestBody": {
          "description": "New board object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/boards/{id}": {
      "get": {
        "tags": ["Boards"],
        "summary": "Get board by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "Board id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBoardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Boards"],
        "summary": "Update board by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "Board id"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Updated board object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBoardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateBoardBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Boards"],
        "summary": "Delete board by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "Board id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoardNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },

    "/columns/": {
      "post": {
        "tags": ["Columns"],
        "summary": "Add a new column to the board using { boardId }",
        "security": [{ "Token": [] }],
        "requestBody": {
          "description": "New column object",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/AddColumnRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/columns/{id}": {
      "patch": {
        "tags": ["Columns"],
        "summary": "Update column by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string" },
            "required": true,
            "description": "Column id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateColumnRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateColumnResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateColumnBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Columns"],
        "summary": "Delete column by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": { "type": "string", "format": "id" },
            "required": true,
            "description": "Column id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColumnNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },

    "/cards": {
      "post": {
        "tags": ["Cards"],
        "summary": "Create a new card",
        "security": [{ "Token": [] }],
        "requestBody": {
          "description": "New card object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/cards/{cardId}": {
      "patch": {
        "tags": ["Cards"],
        "summary": "Update card by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "schema": { "type": "string" },
            "required": true,
            "description": "Card id"
          }
        ],
        "requestBody": {
          "description": "Updated card object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCardBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Cards"],
        "summary": "Delete card by { id }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "schema": { "type": "string" },
            "required": true,
            "description": "Card id"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardNotFoundError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/cards/{cardId}/move": {
      "patch": {
        "tags": ["Cards"],
        "summary": "Move card to the column with { columnId }",
        "security": [{ "Token": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "cardId",
            "schema": { "type": "string" },
            "required": true,
            "description": "Card id"
          }
        ],
        "requestBody": {
          "description": "move card in othe collumn",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveCardRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveCardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveCardBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardNotFoundError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },

    "/issues": {
      "post": {
        "tags": ["Issues"],
        "summary": "Create an issue",
        "security": [{ "Token": [] }],
        "requestBody": {
          "description": "New issue object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIssueRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIssueResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueBadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "$ref": "#/components/schemas/UserRequest"
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "User's email"
          }
        }
      },
      "LoginRequest": {
        "$ref": "#/components/schemas/UserRequest"
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
            "description": "Session's access token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "UpdateUserAvatarRequest": {
        "type": "object",
        "required": ["avatar"],
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UpdateUserAvatarResponse": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "avatarURL": {
                "type": "string",
                "format": "URL",
                "example": "https://res.cloudinary.com/dskzfituz/image/upload/c_fill,h_68,w_68/v1/taskpro-local/users/66213450e6850f2cdd428337/avatar/haln2vjxsonqeahc9cjx?_a=BAMABmP80"
              }
            }
          }
        }
      },

      "CreateBoardRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BoardRequest"
          },
          {
            "required": ["title", "icon", "backgroundImageUrl"]
          }
        ]
      },
      "CreateBoardResponse": {
        "$ref": "#/components/schemas/Board"
      },
      "GetBoardResponse": {
        "$ref": "#/components/schemas/Board"
      },
      "UpdateBoardRequest": {
        "$ref": "#/components/schemas/BoardRequest"
      },
      "UpdateBoardResponse": {
        "$ref": "#/components/schemas/Board"
      },

      "AddCardRequest": {
        "type": "object",
        "required": ["title", "description", "priority", "deadline", "boardId", "columnId"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Card title",
            "example": "title"
          },
          "description": {
            "type": "string",
            "description": "Card description",
            "example": "description"
          },
          "priority": {
            "type": "string",
            "description": "Card priority",
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "example": "12.13.2024",
            "description": "deadline date"
          },
          "boardId": {
            "type": "string",
            "description": "the board in which the task is created",
            "example": "662220a95e39526f21e9d4c2"
          },
          "columnId": {
            "type": "string",
            "description": "the column in which the task is created",
            "example": "662220a95e39526f21e9d4c2"
          }
        }
      },
      "AddCardResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "object",
            "required": ["title", "description", "priority", "deadline", "_id", "createdAt", "updatedAt"],
            "properties": {
              "title": {
                "type": "string",
                "description": "Card title",
                "example": "title"
              },
              "description": {
                "type": "string",
                "description": "Card description",
                "example": "description"
              },
              "priority": {
                "type": "string",
                "description": "Card priority",
                "example": "low"
              },
              "deadline": {
                "type": "string",
                "format": "date",
                "description": "deadline date",
                "example": "12.13.2024"
              },
              "_id": {
                "type": "string",
                "description": "Card id",
                "example": "662112f285746b0dae1375c0"
              },
              "boardId": {
                "type": "string",
                "description": "the board in which the task is created",
                "example": "662220a95e39526f21e9d4c2"
              },
              "columnId": {
                "type": "string",
                "description": "the column in which the task is created",
                "example": "662220a95e39526f21e9d4c2"
              },
              "owner": {
                "type": "string",
                "description": "authorized user",
                "example": "662220a95e39526f21e9d4c2"
              },
              "createdAt": {
                "type": "string",
                "format": "date",
                "description": "date card create",
                "example": "2024-04-18T12:32:51.000Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date",
                "description": "date card update",
                "example": "2024-04-18T12:32:51.000Z"
              }
            }
          }
        }
      },
      "PatchCardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Card title",
            "example": "title"
          },
          "description": {
            "type": "string",
            "description": "Card description",
            "example": "description"
          },
          "priority": {
            "type": "string",
            "description": "Card priority",
            "example": "low"
          },
          "deadline": {
            "type": "string",
            "format": "date",
            "description": "deadline date",
            "example": "12.13.2024"
          }
        }
      },
      "PatchCardResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "object",
            "required": ["title", "description", "priority", "deadline"],
            "properties": {
              "title": {
                "type": "string",
                "description": "Card title",
                "example": "title"
              },
              "description": {
                "type": "string",
                "description": "Card description",
                "example": "description"
              },
              "priority": {
                "type": "string",
                "description": "Card priority",
                "example": "low"
              },
              "deadline": {
                "type": "string",
                "format": "date",
                "description": "deadline date",
                "example": "12.13.2024"
              },
              "_id": {
                "type": "string",
                "description": "Card id",
                "example": "662112f285746b0dae1375c0"
              }
            }
          }
        }
      },
      "MoveCardRequest": {
        "type": "object",
        "required": ["boardId", "columnId"],
        "properties": {
          "boardId": {
            "type": "string",
            "description": "the board in which the task is created",
            "example": "662220a95e39526f21e9d4c2"
          },
          "columnId": {
            "type": "string",
            "description": "the column in which the task is created",
            "example": "662220a95e39526f21e9d4c2"
          }
        }
      },
      "MoveCardResponse": {
        "type": "object",
        "required": ["result"],
        "properties": {
          "result": {
            "type": "object",
            "required": ["_id", "columnId"],
            "properties": {
              "_id": {
                "type": "string",
                "description": "Card id",
                "example": "662112f285746b0dae1375c0"
              },
              "columnId": {
                "type": "string",
                "description": "the column in which the task was moved",
                "example": "662220a95e39526f21e9d4c2"
              }
            }
          }
        }
      },

      "AddColumnRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ColumnRequest"
          },
          {
            "required": ["title", "boardId"]
          }
        ]
      },
      "AddColumnResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Column"
          }
        }
      },
      "UpdateColumnRequest": {
        "type": "object",
        "required": ["title"],
        "properties": {
          "title": {
            "type": "string",
            "example": "To do list",
            "description": "New column title"
          }
        }
      },
      "UpdateColumnResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Column"
          }
        }
      },

      "CreateIssueRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IssueRequest"
          },
          {
            "required": ["email", "message"]
          }
        ]
      },
      "CreateIssueResponse": {
        "$ref": "#/components/schemas/Issue"
      },

      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Nikola Tesla",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "User's email"
          },
          "avatarURL": {
            "type": "string",
            "example": "//www.gravatar.com/avatar/cc06f09cd70054783dd4cbd6d88fb540?s=250&d=retro&f=y",
            "description": "User's avatar URL"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "example": "qwerty123",
            "description": "User's password"
          }
        }
      },
      "Board": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "owner": {
                "type": "string",
                "format": "id",
                "example": "392b29ueb928yr2vb",
                "description": "Id of the person who created the board"
              },
              "columns": {
                "type": "array",
                "items": { "type": "object" },
                "example": [],
                "description": "Board's column list"
              },
              "title": {
                "type": "string",
                "example": "Dream makers project",
                "description": "Board's name"
              },
              "icon": {
                "type": "string",
                "example": "Need to add an example (?)",
                "description": "Board's icon"
              },
              "backgroundImageUrl": {
                "type": "string",
                "format": "URL",
                "example": "https://res.cloudinary.com/dskzfituz/image/upload/c_fill,h_68,w_68/v1/taskpro-local/users/66213450e6850f2cdd428337/avatar/k8bkkaztycx0keyzvu0u?_a=BAMABmP80",
                "description": "Board's background image URL"
              },
              "_id": {
                "type": "string",
                "format": "id",
                "example": "8273bjfiwbe29233vv3",
                "description": "Board's id"
              },
              "createdAt": {
                "type": "string",
                "format": "date",
                "example": "2024-04-21T07:41:01.533Z",
                "description": "Board's date of creation"
              },
              "updatedAt": {
                "type": "string",
                "format": "date",
                "example": "2024-04-21T07:41:01.533Z",
                "description": "Date of last board update"
              }
            }
          }
        }
      },
      "BoardRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Dream makers project",
            "description": "Board's title"
          },
          "icon": {
            "type": "string",
            "example": "Need to add example (?)",
            "description": "Need to add description (?)"
          },
          "backgroundImageUrl": {
            "type": "string",
            "example": "https://res.cloudinary.com/dskzfituz/image/upload/c_fill,h_68,w_68/v1/taskpro-local/users/66213450e6850f2cdd428337/avatar/k8bkkaztycx0keyzvu0u?_a=BAMABmP80",
            "description": "Board's background image URL"
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "To do list",
            "description": "Column's title"
          },
          "cards": {
            "type": "array",
            "items": { "type": "object" },
            "example": [],
            "description": "List of cards in the column"
          },
          "boardId": {
            "type": "string",
            "format": "id",
            "example": "1hf2ue37fhsbdf",
            "description": "_id of the board in which the column is"
          },
          "owner": {
            "type": "string",
            "format": "id",
            "example": "23f2390jvevdl34",
            "description": "Id of the user who created the column"
          },
          "_id": {
            "type": "string",
            "format": "id",
            "example": "sdiuvbwiub298e3b9v2vjnk",
            "description": "Column id"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "2024-04-21T07:41:01.533Z",
            "description": "Column's date of creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "2024-04-21T07:41:01.533Z",
            "description": "Date of last column update"
          }
        }
      },
      "ColumnRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "To do list",
            "description": "Column's title"
          },
          "boardId": {
            "type": "string",
            "example": "1hf2ue37fhsbdf",
            "description": "_id of the board to add the column to"
          }
        }
      },
      "Issue": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "format": "id",
            "example": "283fhvue298hv02ev2",
            "description": "Id of user who created the issue report"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "Email of the user who created the issue report"
          },
          "message": {
            "type": "string",
            "example": "Hi, I want to report about an issue on your website. Kind regards, your Customer",
            "description": "Issue message"
          },
          "_id": {
            "type": "string",
            "format": "id",
            "example": "sdiuvbwiub298e3b9v2vjnk",
            "description": "Issue id"
          },
          "createdAt": {
            "type": "string",
            "format": "date",
            "example": "2024-04-21T07:41:01.533Z",
            "description": "Issue's date of creation"
          },
          "updatedAt": {
            "type": "string",
            "format": "date",
            "example": "2024-04-21T07:41:01.533Z",
            "description": "Issue's last date of update"
          }
        }
      },
      "IssueRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com",
            "description": "Email of the user who created the issue report"
          },
          "message": {
            "type": "string",
            "example": "Hi, I want to report about an issue on your website. Kind regards, your Customer",
            "description": "Issue message"
          }
        }
      },

      "UserBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'email' is a required field"
          }
        }
      },
      "AbsentAvatarError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'avatar' is a required field"
          }
        }
      },
      "BoardBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'title' is a requiered field"
          }
        }
      },
      "UpdateBoardBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'title' is a requiered field"
          }
        }
      },
      "ColumnBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'title' is a required field"
          }
        }
      },
      "UpdateColumnBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Request body can't be empty"
          }
        }
      },
      "CardBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'title' is a requiered field"
          }
        }
      },
      "UpdateCardBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'title' is a requiered field"
          }
        }
      },
      "MoveCardBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'columnId' is a requiered field"
          }
        }
      },
      "IssueBadRequestError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "'message' is a requiered field"
          }
        }
      },
      "AuthenticationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email or password is wrong"
          }
        }
      },
      "AuthorizationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Not authorized"
          }
        }
      },
      "BoardNotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Board not found"
          }
        }
      },
      "ColumnNotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Column not found"
          }
        }
      },
      "CardNotFoundError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Card not found"
          }
        }
      },
      "EmailDublicateError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email in use"
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Something went wrong"
          }
        }
      }
    },

    "securitySchemes": {
      "Token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
